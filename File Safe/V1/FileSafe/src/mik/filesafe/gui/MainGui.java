/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package mik.filesafe.gui;

import java.io.File;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import javax.swing.JOptionPane;
import mik.filesafe.encryption.EncryptorDecryptor;
import mik.filesafe.entity.User;
import mik.filesafe.processor.FileProcessor;

/**
 *
 * @author Rasel
 */
public class MainGui extends javax.swing.JFrame {

    /**
     * Creates new form MainGui
     */
    private User myDetails;
    ArrayList<String> fileList = new ArrayList<String>();
    String fileName = "";
    boolean isDirectoryChoosed = false;
    boolean isFileChoosed = false;

    public MainGui() {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainGui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainGui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainGui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainGui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        initComponents();
        this.setTitle("File Savior");
//        FileNameExtensionFilter filter = new FileNameExtensionFilter("TEXT FILES", "txt", "text");
//        this.jFileChooser.setFileFilter(filter);
        this.radBtnSaveInDiffFolder.setSelected(true);
        this.jRbtnNewKey.setSelected(true);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        buttonGroup2 = new javax.swing.ButtonGroup();
        pnlTabbedHolder = new javax.swing.JPanel();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel3 = new javax.swing.JPanel();
        lblWelcomeText = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jRbtnUseDefaultPass = new javax.swing.JRadioButton();
        jRbtnNewKey = new javax.swing.JRadioButton();
        lblKey = new javax.swing.JLabel();
        keyField = new javax.swing.JPasswordField();
        lblKeyWarning = new javax.swing.JLabel();
        lblRetypeKey = new javax.swing.JLabel();
        ReTypeKeyField = new javax.swing.JPasswordField();
        lblPasswordMismatch = new javax.swing.JLabel();
        jDirectoryChooser = new javax.swing.JFileChooser();
        jFileChooser = new javax.swing.JFileChooser();
        pnlButtonHolder = new javax.swing.JPanel();
        radBtnReplaceOriginalFile = new javax.swing.JRadioButton();
        radBtnSaveInDiffFolder = new javax.swing.JRadioButton();
        btnEncrypt = new javax.swing.JButton();
        btnDecrypt = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenu2 = new javax.swing.JMenu();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        pnlTabbedHolder.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        jPanel3.setEnabled(false);

        lblWelcomeText.setText("Welcome ");

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel1.setText("Important Note: ");

        jTextArea1.setEditable(false);
        jTextArea1.setColumns(20);
        jTextArea1.setLineWrap(true);
        jTextArea1.setRows(5);
        jTextArea1.setText("You have to use the same key to encrypt and decrypt a file. Your key will not be stored anywhere so be carefull about choosing appropriate key. Best of luck with your encryption and decryption! ");
        jTextArea1.setWrapStyleWord(true);
        jScrollPane1.setViewportView(jTextArea1);

        buttonGroup1.add(jRbtnUseDefaultPass);
        jRbtnUseDefaultPass.setSelected(true);
        jRbtnUseDefaultPass.setText("I will use my program default  key");
        jRbtnUseDefaultPass.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jRbtnUseDefaultPassMouseClicked(evt);
            }
        });

        buttonGroup1.add(jRbtnNewKey);
        jRbtnNewKey.setText("I want to use different key ");
        jRbtnNewKey.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jRbtnNewKeyMouseClicked(evt);
            }
        });

        lblKey.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        lblKey.setText("Key:");

        keyField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                keyFieldKeyReleased(evt);
            }
        });

        lblKeyWarning.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        lblKeyWarning.setForeground(new java.awt.Color(153, 0, 0));
        lblKeyWarning.setText("Must be 16 character long!");

        lblRetypeKey.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        lblRetypeKey.setText("Re-type key:");

        ReTypeKeyField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                ReTypeKeyFieldKeyReleased(evt);
            }
        });

        lblPasswordMismatch.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        lblPasswordMismatch.setForeground(new java.awt.Color(153, 0, 0));
        lblPasswordMismatch.setText("Password mismatch!");

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(lblRetypeKey)
                    .addComponent(lblKey)
                    .addComponent(jLabel1)
                    .addComponent(lblWelcomeText))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jRbtnNewKey)
                    .addComponent(jRbtnUseDefaultPass)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 486, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(ReTypeKeyField, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 126, Short.MAX_VALUE)
                            .addComponent(keyField, javax.swing.GroupLayout.Alignment.LEADING))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblKeyWarning)
                            .addComponent(lblPasswordMismatch))))
                .addContainerGap(21, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblWelcomeText)
                .addGap(18, 18, 18)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jRbtnNewKey)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jRbtnUseDefaultPass)
                .addGap(13, 13, 13)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblKey)
                    .addComponent(keyField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblKeyWarning))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblRetypeKey)
                    .addComponent(ReTypeKeyField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblPasswordMismatch))
                .addContainerGap(39, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Choose Key", jPanel3);

        jDirectoryChooser.setFileSelectionMode(javax.swing.JFileChooser.DIRECTORIES_ONLY);
        jDirectoryChooser.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jDirectoryChooserActionPerformed(evt);
            }
        });
        jTabbedPane1.addTab("Choose Directory", jDirectoryChooser);

        jFileChooser.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jFileChooserActionPerformed(evt);
            }
        });
        jTabbedPane1.addTab("Choose File", jFileChooser);

        javax.swing.GroupLayout pnlTabbedHolderLayout = new javax.swing.GroupLayout(pnlTabbedHolder);
        pnlTabbedHolder.setLayout(pnlTabbedHolderLayout);
        pnlTabbedHolderLayout.setHorizontalGroup(
            pnlTabbedHolderLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlTabbedHolderLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 620, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(20, Short.MAX_VALUE))
        );
        pnlTabbedHolderLayout.setVerticalGroup(
            pnlTabbedHolderLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlTabbedHolderLayout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 355, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(22, Short.MAX_VALUE))
        );

        pnlButtonHolder.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        buttonGroup2.add(radBtnReplaceOriginalFile);
        radBtnReplaceOriginalFile.setText("Replace original file with encrypted file");

        buttonGroup2.add(radBtnSaveInDiffFolder);
        radBtnSaveInDiffFolder.setText("Save in a separate folder");

        btnEncrypt.setText("Encrypt");
        btnEncrypt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEncryptActionPerformed(evt);
            }
        });

        btnDecrypt.setText("Decrypt");
        btnDecrypt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDecryptActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnlButtonHolderLayout = new javax.swing.GroupLayout(pnlButtonHolder);
        pnlButtonHolder.setLayout(pnlButtonHolderLayout);
        pnlButtonHolderLayout.setHorizontalGroup(
            pnlButtonHolderLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlButtonHolderLayout.createSequentialGroup()
                .addGap(103, 103, 103)
                .addGroup(pnlButtonHolderLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(radBtnSaveInDiffFolder)
                    .addComponent(radBtnReplaceOriginalFile))
                .addContainerGap(338, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlButtonHolderLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnEncrypt)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnDecrypt)
                .addGap(34, 34, 34))
        );
        pnlButtonHolderLayout.setVerticalGroup(
            pnlButtonHolderLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlButtonHolderLayout.createSequentialGroup()
                .addComponent(radBtnReplaceOriginalFile)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(radBtnSaveInDiffFolder)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(pnlButtonHolderLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnEncrypt)
                    .addComponent(btnDecrypt))
                .addGap(0, 11, Short.MAX_VALUE))
        );

        jMenu1.setText("File");
        jMenuBar1.add(jMenu1);

        jMenu2.setText("Edit");
        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(pnlTabbedHolder, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(pnlButtonHolder, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(12, 12, 12)
                .addComponent(pnlTabbedHolder, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(pnlButtonHolder, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jFileChooserActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jFileChooserActionPerformed
        // TODO add your handling code here:
        isFileChoosed = true;
        fileName = this.jFileChooser.getSelectedFile().getName();
        System.out.println(fileName);

    }//GEN-LAST:event_jFileChooserActionPerformed

    private void jDirectoryChooserActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jDirectoryChooserActionPerformed
        // TODO add your handling code here:
        isDirectoryChoosed = true;
        System.out.println("directory path==" + jDirectoryChooser.getSelectedFile().getAbsolutePath());
        File folder = new File(jDirectoryChooser.getSelectedFile().getAbsolutePath());
        File[] listOfFiles = folder.listFiles();

        for (int i = 0; i < listOfFiles.length; i++) {
            if (listOfFiles[i].isFile()) {
                fileList.add(listOfFiles[i].getName());
                System.out.println(listOfFiles[i].getName());
            }
        }
    }//GEN-LAST:event_jDirectoryChooserActionPerformed

    private void btnEncryptActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEncryptActionPerformed
        // TODO add your handling code here:
        char pass[], rePass[];
        String password, rePassword;
        if (this.jRbtnUseDefaultPass.isSelected()) {
            password = "L!onelAndreMess!";
            rePassword = "L!onelAndreMess!";

        } else {
            pass = this.keyField.getPassword();
            rePass = this.ReTypeKeyField.getPassword();
            password = new String(pass);
            rePassword = new String(rePass);

        }

        if (password.isEmpty()) {
            System.out.println("password field is empty!!");
            return;
        }
        if (password.equals(rePassword)) {

            EncryptorDecryptor encMng = new EncryptorDecryptor(password);
            if (isDirectoryChoosed) {
                FileProcessor fp = new FileProcessor();

                if (this.radBtnSaveInDiffFolder.isSelected()) {
                    String getDirPath = jDirectoryChooser.getSelectedFile().getAbsolutePath();
                    String dirPath = getDirPath + File.separator + "FileSafe";
                    fp.createDirectoryInSpecifiedpath(dirPath);
                    for (int i = 0; i < fileList.size(); i++) {
                        byte[] fileAsByteStream = fp.readFileAsByteStream(getDirPath + File.separator + fileList.get(i));
                        byte[] outputByteStream = encMng.getEncryptedByteStream(fileAsByteStream);
                        fp.writeByteStreamAsAFile(dirPath, fileList.get(i) + "_enc", outputByteStream);
                    }

                } else {
                    String dirPath = jDirectoryChooser.getSelectedFile().getAbsolutePath();
                    for (int i = 0; i < fileList.size(); i++) {
                        byte[] fileAsByteStream = fp.readFileAsByteStream(dirPath + File.separator + fileList.get(i));
                        byte[] outputByteStream = encMng.getEncryptedByteStream(fileAsByteStream);
                        fp.writeByteStreamAsAFile(dirPath, fileList.get(i) + "_enc", outputByteStream);
                    }
                }
                isDirectoryChoosed = false;
                JOptionPane.showMessageDialog(rootPane, "Encryption done.");
            } else if (isFileChoosed) {
                FileProcessor fp = new FileProcessor();
                String absoluteFilePath = jFileChooser.getSelectedFile().getAbsolutePath();

                System.out.println(absoluteFilePath);
                byte[] fileAsByteStream = fp.readFileAsByteStream(absoluteFilePath);
                byte[] outputByteStream = encMng.getEncryptedByteStream(fileAsByteStream);
                if (this.radBtnSaveInDiffFolder.isSelected()) {
                    Date today = new Date();
                    SimpleDateFormat sdf = new SimpleDateFormat("dd-MM-yyyy");
                    String d = sdf.format(today.getTime());
                    String getDirPath = this.jFileChooser.getSelectedFile().getParent();
                    String dirPath = getDirPath + "FileSafe_" + d;
                    fp.createDirectoryInSpecifiedpath(dirPath);
                    fp.writeByteStreamAsAFile(dirPath, fileName + "_enc", outputByteStream);
                } else {
                    String getDirPath = this.jFileChooser.getSelectedFile().getParent();
                    fp.writeByteStreamAsAFile(getDirPath, fileName + "_enc", outputByteStream);
                    fp.deleteAFile(getDirPath, fileName);
                }
                isFileChoosed = true;
                JOptionPane.showMessageDialog(rootPane, "Encryption done.");
            } else {
                JOptionPane.showMessageDialog(rootPane, "Please open a file or a directory first!");
            }
        } else {
            this.lblPasswordMismatch.setVisible(true);
            JOptionPane.showMessageDialog(rootPane, "Password mismatched!");
        }
    }//GEN-LAST:event_btnEncryptActionPerformed

    private void keyFieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_keyFieldKeyReleased
        // TODO add your handling code here:
        char[] pass = this.keyField.getPassword();
        if (pass.length < 16) {
            this.lblKeyWarning.setVisible(true);
        } else if (pass.length > 16) {
            String temp = new String(pass);
            temp = temp.substring(0, 16);
            this.keyField.setText(temp);
        } else {
            this.lblKeyWarning.setVisible(false);
        }
    }//GEN-LAST:event_keyFieldKeyReleased

    private void ReTypeKeyFieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_ReTypeKeyFieldKeyReleased
        // TODO add your handling code here:
        char[] pass = this.keyField.getPassword();
        char[] rePass = this.ReTypeKeyField.getPassword();

        if (rePass.length < 16) {
            this.lblPasswordMismatch.setVisible(true);
        } else if (rePass.length == 16) {
            String tempPass = new String(pass);
            String tempRePass = new String(rePass);
            if (tempPass.equals(tempRePass)) {
                this.lblPasswordMismatch.setVisible(false);
            } else {
                this.lblPasswordMismatch.setVisible(true);
            }
        } else {
            String temp = new String(rePass);
            temp = temp.substring(0, 16);
            this.ReTypeKeyField.setText(temp);
        }
    }//GEN-LAST:event_ReTypeKeyFieldKeyReleased

    private void jRbtnUseDefaultPassMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jRbtnUseDefaultPassMouseClicked
        // TODO add your handling code here:
        changeVisibility(false);
    }//GEN-LAST:event_jRbtnUseDefaultPassMouseClicked

    private void jRbtnNewKeyMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jRbtnNewKeyMouseClicked
        // TODO add your handling code here:
        changeVisibility(true);
    }//GEN-LAST:event_jRbtnNewKeyMouseClicked

    private void btnDecryptActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDecryptActionPerformed
        // TODO add your handling code here:
        char pass[], rePass[];
        String password, rePassword;
        if (this.jRbtnUseDefaultPass.isSelected()) {
//<editor-fold>
            password = "L!onelAndreMess!";
            rePassword = "L!onelAndreMess!";
//</editor-fold>
        } else {
            pass = this.keyField.getPassword();
            rePass = this.ReTypeKeyField.getPassword();
            password = new String(pass);
            rePassword = new String(rePass);

        }

        if (password.isEmpty()) {
            System.out.println("password field is empty!!");
            return;
        }
        if (password.equals(rePassword)) {

            EncryptorDecryptor encMng = new EncryptorDecryptor(password);
            if (isDirectoryChoosed) {
                FileProcessor fp = new FileProcessor();
                String dirPath = jDirectoryChooser.getSelectedFile().getAbsolutePath();
                for (int i = 0; i < fileList.size(); i++) {
                    String tempName = fileList.get(i);
                    byte[] fileAsByteStream = fp.readFileAsByteStream(dirPath + File.separator + tempName);
                    String fName = tempName.substring(0, tempName.lastIndexOf("_"));
                    byte[] outputByteStream = encMng.getDecryptedByteStream(fileAsByteStream);
                    fp.writeByteStreamAsAFile(dirPath, fName, outputByteStream);

                }
                for (int i = 0; i < fileList.size(); i++) {
                    fp.deleteAFile(dirPath, fileList.get(i));
                }

                isDirectoryChoosed = false;
                JOptionPane.showMessageDialog(rootPane, "Encryption done.");
            } else if (isFileChoosed) {
                FileProcessor fp = new FileProcessor();
                String absoluteFilePath = jFileChooser.getSelectedFile().getAbsolutePath();
                String fName = fileName.substring(0, fileName.lastIndexOf("_"));
                System.out.println(absoluteFilePath);
                byte[] fileAsByteStream = fp.readFileAsByteStream(absoluteFilePath);
                byte[] outputByteStream = encMng.getDecryptedByteStream(fileAsByteStream);

                String getDirPath = this.jFileChooser.getSelectedFile().getParent();
                fp.writeByteStreamAsAFile(getDirPath, fName, outputByteStream);
                fp.deleteAFile(getDirPath, this.fileName);

                isFileChoosed = true;
                JOptionPane.showMessageDialog(rootPane, "Encryption done.");
            } else {
                JOptionPane.showMessageDialog(rootPane, "Please open a file or a directory first!");
            }
        } else {
            this.lblPasswordMismatch.setVisible(true);
        }
    }//GEN-LAST:event_btnDecryptActionPerformed

    public void changeVisibility(boolean value) {
        this.lblKey.setVisible(value);
        this.lblRetypeKey.setVisible(value);
        this.lblKeyWarning.setVisible(value);
        this.ReTypeKeyField.setVisible(value);
        this.keyField.setVisible(value);
        this.lblPasswordMismatch.setVisible(value);
    }

    public User getMyDetails() {
        return myDetails;
    }

    public void setMyDetails(User myDetails) {
        this.myDetails = myDetails;
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPasswordField ReTypeKeyField;
    private javax.swing.JButton btnDecrypt;
    private javax.swing.JButton btnEncrypt;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.ButtonGroup buttonGroup2;
    private javax.swing.JFileChooser jDirectoryChooser;
    private javax.swing.JFileChooser jFileChooser;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JRadioButton jRbtnNewKey;
    private javax.swing.JRadioButton jRbtnUseDefaultPass;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JPasswordField keyField;
    private javax.swing.JLabel lblKey;
    private javax.swing.JLabel lblKeyWarning;
    private javax.swing.JLabel lblPasswordMismatch;
    private javax.swing.JLabel lblRetypeKey;
    private javax.swing.JLabel lblWelcomeText;
    private javax.swing.JPanel pnlButtonHolder;
    private javax.swing.JPanel pnlTabbedHolder;
    private javax.swing.JRadioButton radBtnReplaceOriginalFile;
    private javax.swing.JRadioButton radBtnSaveInDiffFolder;
    // End of variables declaration//GEN-END:variables
}
